## logging
logging.level.root=${LOG_LEVEL:INFO}
logging.level.org.hibernate=ERROR
logging.level.org.springframework.web=${LOG_LEVEL:WARN}
logging.file=data/myretail.log
logging.pattern.console=%clr(%d{yyyy-MM-dd HH:mm:ss.SSS}){faint} %clr([%12.12t]){faint} %clr(${LOG_LEVEL_PATTERN:-%5p}) %clr(%logger{39}){cyan}.%clr(%M{15}\\(%line\\)){cyan} :: %msg%n
logging.pattern.file=%clr(%d{yyyy-MM-dd HH:mm:ss.SSS}){faint} %clr([%12.12t]){faint} %clr(${LOG_LEVEL_PATTERN:-%5p}) %clr(%logger{39}){cyan}.%clr(%M{15}\\(%line\\)){cyan} :: %msg%n
###*************************************************************************************************************************
## Server Configs
server.port=${SERVER_PORT:8080}
spring.profiles.active=${SPRING_PROFILE_ACTIVE:local}
# Maximum number of connections that the server will accept and process at any given time.
server.tomcat.max-connections=500000
# Maximum amount of worker threads.
server.tomcat.max-threads=500000
# Maximum size in bytes of the HTTP message header.
server.max-http-header-size=40960
# ===============================
# = JPA / HIBERNATE
# ===============================
# Show or not log for each sql query
#spring.jpa.show-sql=true
## Hibernate ddl auto (create, create-drop, update): with "create-drop" the database
## schema will be automatically created afresh for every start of application
#spring.jpa.hibernate.ddl-auto=create-drop
## Allows Hibernate to generate SQL optimized for a particular DBMS
#spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.DerbyDialect
#spring.datasource.url=jdbc:derby:RetailDb;create=true

